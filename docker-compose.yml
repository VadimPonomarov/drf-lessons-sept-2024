services:
  app:
    build:
      context: ./backend
    volumes:
      - ./backend:/app
    environment:
      IS_DOCKER: True
      POSTGRES_HOST: "${POSTGRES_HOST:-pg}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      POSTGRES_NAME: "${POSTGRES_NAME:-db}"
      POSTGRES_USER: "${POSTGRES_USER:-user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-root}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-password}"
    ports:
      - "8888:8000"
    restart: on-failure
    depends_on:
      - pg
      - minio
      - rabbitmq
      - celery
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py wait_db && python manage.py migrate && python manage.py 
      runserver 0.0.0.0:8000"

  pg:
    image: postgres
    environment:
      POSTGRES_DB: "${POSTGRES_NAME:-db}"
      POSTGRES_USER: "${POSTGRES_USER:-user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
    ports:
      - "5432:5432"
    volumes:
      - ./backend/db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_NAME:-db}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    image: nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./backend/static:/usr/share/nginx/doc
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      retries: 1

  frontend:
    build:
      context: ./frontend
    working_dir: /app
    environment:
      DOCKER: True
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - app
      - redis
    volumes:
      - ./frontend:/app
    command: >
      sh -c "npm run start"

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY:-root}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY:-password}"
    ports:
      - "9000:9000"
      - "9001:9001"
    extra_hosts:
      - "minio:127.0.0.1"
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001" ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: server /data --console-address ":9001"

  mailing:
    build: ./mailing
    environment:
      DOCKER: "True"
      CELERY_BROKER: "${APP_CONFIG__CELERY_BROKER:-pyamqp://guest:guest@rabbitmq:5672//}"
      PYTHONUNBUFFERED: 1  # Добавляем для лучшего логирования
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy  # Ждем пока RabbitMQ будет готов
      celery:
        condition: service_started
      app:
        condition: service_started
    volumes:
      - ./mailing/src:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped  # Добавляем политику перезапуска
    command: >
      sh -c "
        python -m uvicorn main:main_app --host 0.0.0.0 --port 8000 --reload
      "

  rabbitmq:
    image: rabbitmq:management-alpine
    hostname: rabbitmq
    restart: always
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: [ "CMD", "rabbitmqctl status" ]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: ./mailing
    volumes:
      - ./mailing/src:/app
    environment:
      CELERY_BROKER: "${APP_CONFIG__CELERY_BROKER:-pyamqp://guest:guest@rabbitmq:5672//}"
    restart: always
    depends_on:
      - rabbitmq
    command: >
      sh -c "celery -A celery_config worker -l info -P solo"

  flower:
    image: mher/flower:0.9.7
    restart: on-failure
    depends_on:
      - rabbitmq
      - celery
    ports:
      - "5555:5555"
    command: [ "flower", "--broker=pyamqp://guest:guest@rabbitmq:5672//", "--port=5555" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5555" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - "5540:5540"
    volumes:
      - ./redis-insight:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5540" ]
      interval: 30s
      timeout: 10s
      retries: 3



